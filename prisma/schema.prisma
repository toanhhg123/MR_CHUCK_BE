generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id   String @id @default(uuid())
  name ERole  @unique
}

model User {
  id                     String                 @id @default(uuid())
  username               String
  firstName              String?
  lastName               String?
  email                  String                 @unique
  password               String
  role                   ERole
  age                    Int?
  avatar                 String?
  gender                 String?
  paidVersion            EPAD_VERSION?
  etnicity               EUserRaceAndEthnicity?
  avatar_imagesAvatar_id String?
  avatarImage            avatar_images?         @relation(fields: [avatar_imagesAvatar_id], references: [avatar_id])
  Case                   Case[]
  Message                Message[]
  UserCase               UserCase[]
  UserRoom               UserRoom[]
  MessageCase            MessageCase[]
}

model Location {
  id   String @id @default(uuid())
  name String @unique
  Case Case[]
}

model Case {
  id                      String              @id @default(uuid())
  name                    String
  number                  String              @unique
  description             String?
  locationId              String?
  subDepartment           String?
  attorneyName            String?
  attorneyFirmName        String?
  neutralSummary          String?
  additionalInfo          String?
  complaintFormUploadPath String?
  sjqSubmissionDate       DateTime?           @default(now())
  sjqApprovalStatus       ESjqApprovalStatus? @default(APPROVED)
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @default(now())
  userCreatedId           String
  type                    ECASE_TYPE?         @default(TORTS)
  status                  ECaseStatus         @default(NEW)
  location                Location?           @relation(fields: [locationId], references: [id])
  userCreated             User                @relation(fields: [userCreatedId], references: [id])
  rooms                   Room[]
  userCases               UserCase[]
  messageCases            MessageCase[]
}

model UserCase {
  id        String   @id @default(uuid())
  userId    String
  caseId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  case      Case     @relation(fields: [caseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model MessageCase {
  id          String        @id @default(uuid())
  senderId    String
  replyId     String?
  message     String
  case        Case          @relation(fields: [caseId], references: [id])
  caseId      String
  dateCreated DateTime      @default(now())
  reply       MessageCase?  @relation("Replies", fields: [replyId], references: [id])
  sender      User          @relation(fields: [senderId], references: [id])
  replies     MessageCase[] @relation("Replies")
}

model Room {
  id        String     @id @default(uuid())
  type      ETypeRoom  @default(GROUP)
  caseId    String
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  messages  Message[]
  case      Case       @relation(fields: [caseId], references: [id])
  userRooms UserRoom[]
}

model UserRoom {
  id         String        @id @default(uuid())
  roomId     String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @default(now())
  userId     String
  memberType EMemberInRoom @default(MEMBER)
  room       Room          @relation(fields: [roomId], references: [id])
  user       User          @relation(fields: [userId], references: [id])
}

model Message {
  id          String    @id @default(uuid())
  senderId    String
  replyId     String?
  message     String
  roomId      String
  dateCreated DateTime  @default(now())
  reply       Message?  @relation("Replies", fields: [replyId], references: [id])
  replies     Message[] @relation("Replies")
  room        Room      @relation(fields: [roomId], references: [id])
  sender      User      @relation(fields: [senderId], references: [id])
}

model avatar_images {
  avatar_id String  @id
  gender    String?
  age_range String?
  etnicity  String?
  image_url String?
  User      User[]
}

enum ERole {
  USER
  ADMIN
  JUROR
}

enum ECaseStatus {
  NEW
  IN_PROGRESS
  CLOSED
}

enum EPAD_VERSION {
  FREE
  PAID
}

enum ECASE_TYPE {
  TORTS
  MEDICAL_MALPRACTICE
}

enum ESjqApprovalStatus {
  APPROVED
  PENDING
}

enum ETypeRoom {
  BOX
  GROUP
}

enum EMemberInRoom {
  MEMBER
  OWNER
  DEPUTY
}

enum EMessageBoxStatus {
  NEW
  IN_PROGRESS
  CLOSED
}

enum EMemberInMessageBox {
  MEMBER
  OWNER
  DEPUTY
}

enum EUserRaceAndEthnicity {
  ASIAN
  BLACK
  WHITE
  INDIAN
  MIDDLE_EASTERN
  PACIFIC_ISLANDER
  AFRICAN_OR_Black
  HISPANIC_OR_LATINO
}
